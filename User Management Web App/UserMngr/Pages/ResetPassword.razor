@page "/ResetPassword"
@page "/ResetPW/{ID?}"
@using Basics
@using Newtonsoft.Json
@using UserMngr.Services.API
@inject HttpClient Http

@inject IUserManager UserMNGR


<title> MBBQ Reset Password</title>
    

@if (LinkIsActive == true)
{
    
@if (PWReseted == false)
    {
        
        <div style="margin:25px">

            <h3>Cambie su contraseña</h3>
        <h4>Entre su contraseña dos veces</h4>

        </div>
        <div style="margin:25px">

        <input type="password" @bind=PW1 />
        </div>

        <div style="margin:25px">


        <input type="password" @bind=PW2  />
        </div>
        <div style="margin:25px">
            @if (PW1 == PW2 && PW1 != string.Empty && PW2 != string.Empty )
            {
                DebugData = "Las contraseñas son iguales presione continuar.";
                <h4 style="color:green" > @DebugData </h4>

                Continuar = true;

            }
   
            @if (PW1 != PW2 )
            {
                DebugData = "Las contraseñas no son iguales, tienen que ser la misma.";
                 <h4 style="color:red" > @DebugData </h4>
                 Continuar = false;
            }
            @if(BTNPressed == true && PW1 == string.Empty && PW2 == string.Empty)
            {
                  DebugData = "Escriba su contraseña dos veces.";
                <h4 style="color:red" > @DebugData </h4>

                Continuar = false;

            }

        <button type="button"  @onclick="SavePW"  class="btn btn-primary"  >Continuar</button>
        </div>
    }

    @if (PWReseted==true)
   {
       <h1>Su contraseña ah sido cambiada</h1>
       <h4>Vuelva a la app Martin's BBQ, gracias.</h4>
       
   }
}

@code 
{
    [Parameter]
    public string? ID { get; set; }
    public string PW1 { get; set; }         
    public string PW2 { get; set; }
    public string DebugData { get; set; }
    public bool Continuar { get; set; } 
    public bool BTNPressed { get; set; }
    public bool PWReseted { get; set; }
    public bool LinkIsActive { get; set; }
    
    protected override void OnParametersSet()
    {

        ID = ID ?? string.Empty;
        PW1 = PW1 ?? string.Empty;
        PW2 = PW2 ?? string.Empty; 
        DebugData = DebugData ?? string.Empty; 
        Continuar = false;
        BTNPressed = false;
        PWReseted = false;
        //LinkIsActive = false;


    }


    protected override async Task OnInitializedAsync()
    {
        ID = ID;
        var result =  await UserMNGR.VerifyLinkIsActive(ID);
        if(result.Contains("true") == true)
        {
            LinkIsActive = true;
        }
    }
    private async Task SavePW()
    {
        BTNPressed = true;

        if (Continuar ==true && PW1 !=string.Empty && PW2 != string.Empty && ID != string.Empty)
        { var Epassword = U.GetHashString(PW1);
            //call Update PW
            //  await Task.Delay(5000);
            try
            {
                //  var result = await Http.GetFromJsonAsync<HttpResponseMessage>("/api/Usuario/API/Validate/User/"+ID);
                var result =  await UserMNGR.ResetPW(ID,Epassword);
                if (result!=null)
                {
                    DebugData = result;
                    PWReseted = true;
                    return;
                    //name = name is null ? JsonConvert.DeserializeObject<string>(result.Content.): string.Empty;
                }           

            }
            catch(Exception e) {

                if(e != null)
                {

                    DebugData =  e.Message;
                    PWReseted = false;
                    return;


                }
            }
        }
        DebugData = "Entre una Contraseña nueva!";
    }
}
